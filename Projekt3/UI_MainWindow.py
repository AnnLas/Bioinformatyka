from FastaParser import FastaParser
from FastaReader import FastaReader
from LocalMatch import LocalMatch
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QFileDialog


class Ui_MainWindow(object):
    """
            A class used to show GUI. User have three options to provide sequence: by hand, from file, from web.
            When one option is selected with combobox, other are disabled.

            On "Show charts" button two plots show, one is 'base', next is filtered with given parameters of window
            and treshold.


            """

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(888, 776)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 841, 481))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.comboBox = QtWidgets.QComboBox(self.horizontalLayoutWidget)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.verticalLayout.addWidget(self.comboBox)
        self.open_file_button_1 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.open_file_button_1.setObjectName("open_file_button_1")
        self.verticalLayout.addWidget(self.open_file_button_1)
        self.label_4 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_4.setObjectName("label_4")
        self.verticalLayout.addWidget(self.label_4)
        self.sequence_1_txt = QtWidgets.QTextEdit(self.horizontalLayoutWidget)
        self.sequence_1_txt.setObjectName("sequence_1_txt")
        self.verticalLayout.addWidget(self.sequence_1_txt)
        self.label_3 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_3.setObjectName("label_3")
        self.verticalLayout.addWidget(self.label_3)
        self.id_1_txt = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.id_1_txt.setObjectName("id_1_txt")
        self.verticalLayout.addWidget(self.id_1_txt)
        self.search_1 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.search_1.setObjectName("search_1")
        self.verticalLayout.addWidget(self.search_1)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_3.addWidget(self.label_2)
        self.comboBox_2 = QtWidgets.QComboBox(self.horizontalLayoutWidget)
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.verticalLayout_3.addWidget(self.comboBox_2)
        self.open_file_button_2 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.open_file_button_2.setObjectName("open_file_button_2")
        self.verticalLayout_3.addWidget(self.open_file_button_2)
        self.label_6 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_3.addWidget(self.label_6)
        self.sequence_2_txt = QtWidgets.QPlainTextEdit(self.horizontalLayoutWidget)
        self.sequence_2_txt.setObjectName("sequence_2_txt")
        self.verticalLayout_3.addWidget(self.sequence_2_txt)
        self.label_5 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_3.addWidget(self.label_5)
        self.id_2_txt = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.id_2_txt.setObjectName("id_2_txt")
        self.verticalLayout_3.addWidget(self.id_2_txt)
        self.search_2 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.search_2.setObjectName("search_2")
        self.verticalLayout_3.addWidget(self.search_2)
        self.horizontalLayout.addLayout(self.verticalLayout_3)
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(310, 490, 221, 31))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.show_global_match_button = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.show_global_match_button.setObjectName("show_global_match_button")
        self.verticalLayout_4.addWidget(self.show_global_match_button)
        self.substitution_matrix = QtWidgets.QTableWidget(self.centralwidget)
        self.substitution_matrix.setGeometry(QtCore.QRect(10, 540, 411, 151))
        self.substitution_matrix.setObjectName("substitution_matrix")
        self.substitution_matrix.setColumnCount(4)
        self.substitution_matrix.setRowCount(4)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setItem(0, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setItem(1, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setItem(2, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setItem(2, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setItem(2, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setItem(3, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setItem(3, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setItem(3, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.substitution_matrix.setItem(3, 3, item)
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(20, 520, 161, 17))
        self.label_7.setObjectName("label_7")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(430, 530, 116, 221))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_13 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_13.setObjectName("label_13")
        self.verticalLayout_2.addWidget(self.label_13)
        self.label_8 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_8.setObjectName("label_8")
        self.verticalLayout_2.addWidget(self.label_8)
        self.gap_txt = QtWidgets.QSpinBox(self.verticalLayoutWidget)
        self.gap_txt.setMinimum(-100)
        self.gap_txt.setMaximum(100)
        self.gap_txt.setProperty("value", -2)
        self.gap_txt.setObjectName("gap_txt")
        self.verticalLayout_2.addWidget(self.gap_txt)
        self.label_9 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_9.setObjectName("label_9")
        self.verticalLayout_2.addWidget(self.label_9)
        self.G_txt = QtWidgets.QSpinBox(self.verticalLayoutWidget)
        self.G_txt.setMinimum(-100)
        self.G_txt.setMaximum(100)
        self.G_txt.setProperty("value", -15)
        self.G_txt.setObjectName("G_txt")
        self.verticalLayout_2.addWidget(self.G_txt)
        self.label_11 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_11.setObjectName("label_11")
        self.verticalLayout_2.addWidget(self.label_11)
        self.L_txt = QtWidgets.QSpinBox(self.verticalLayoutWidget)
        self.L_txt.setMinimum(-100)
        self.L_txt.setMaximum(100)
        self.L_txt.setProperty("value", -2)
        self.L_txt.setObjectName("spinBox_2")
        self.verticalLayout_2.addWidget(self.L_txt)
        self.match_option_cbox = QtWidgets.QComboBox(self.centralwidget)
        self.match_option_cbox.setGeometry(QtCore.QRect(10, 700, 411, 25))
        self.match_option_cbox.setObjectName("match_option_cbox")
        self.match_option_cbox.addItem("")
        self.match_option_cbox.addItem("")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(550, 670, 67, 20))
        self.label_12.setObjectName("label_12")
        self.path_nr_combobox = QtWidgets.QComboBox(self.centralwidget)
        self.path_nr_combobox.setGeometry(QtCore.QRect(550, 690, 131, 25))
        self.path_nr_combobox.setObjectName("path_nr_combobox")
        self.statistics_txt = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.statistics_txt.setEnabled(True)
        self.statistics_txt.setReadOnly(True)
        self.statistics_txt.setGeometry(QtCore.QRect(550, 500, 301, 171))
        self.statistics_txt.setObjectName("statistics_txt")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "First sequence:"))
        self.comboBox.setItemText(0, _translate("MainWindow", "User input"))
        self.comboBox.setItemText(1, _translate("MainWindow", "From File"))
        self.comboBox.setItemText(2, _translate("MainWindow", "From web"))
        self.open_file_button_1.setText(_translate("MainWindow", "Open file"))
        self.label_4.setText(_translate("MainWindow", "sequence:"))
        self.label_3.setText(_translate("MainWindow", "id:"))
        self.search_1.setText(_translate("MainWindow", "Search"))
        self.label_2.setText(_translate("MainWindow", "Second sequence:"))
        self.path_nr_combobox.setItemText(0, _translate("MainWindow", "1"))
        self.comboBox_2.setItemText(0, _translate("MainWindow", "User input"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "From File"))
        self.comboBox_2.setItemText(2, _translate("MainWindow", "From web"))
        self.open_file_button_2.setText(_translate("MainWindow", "Open file"))
        self.label_6.setText(_translate("MainWindow", "sequence:"))
        self.label_5.setText(_translate("MainWindow", "id"))
        self.search_2.setText(_translate("MainWindow", "Search"))
        self.show_global_match_button.setText(_translate("MainWindow", "Show Global Match"))
        item = self.substitution_matrix.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "A"))
        item = self.substitution_matrix.verticalHeaderItem(1)
        item.setText(_translate("MainWindow", "C"))
        item = self.substitution_matrix.verticalHeaderItem(2)
        item.setText(_translate("MainWindow", "G"))
        item = self.substitution_matrix.verticalHeaderItem(3)
        item.setText(_translate("MainWindow", "T"))
        item = self.substitution_matrix.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "A"))
        item = self.substitution_matrix.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "C"))
        item = self.substitution_matrix.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "G"))
        item = self.substitution_matrix.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "T"))
        __sortingEnabled = self.substitution_matrix.isSortingEnabled()
        self.substitution_matrix.setSortingEnabled(False)
        item = self.substitution_matrix.item(0, 0)
        item.setText(_translate("MainWindow", "2"))
        item = self.substitution_matrix.item(0, 1)
        item.setText(_translate("MainWindow", "-7"))
        item = self.substitution_matrix.item(0, 2)
        item.setText(_translate("MainWindow", "-5"))
        item = self.substitution_matrix.item(0, 3)
        item.setText(_translate("MainWindow", "-7"))
        item = self.substitution_matrix.item(1, 0)
        item.setText(_translate("MainWindow", "-7"))
        item = self.substitution_matrix.item(1, 1)
        item.setText(_translate("MainWindow", "2"))
        item = self.substitution_matrix.item(1, 2)
        item.setText(_translate("MainWindow", "7"))
        item = self.substitution_matrix.item(1, 3)
        item.setText(_translate("MainWindow", "-5"))
        item = self.substitution_matrix.item(2, 0)
        item.setText(_translate("MainWindow", "-5"))
        item = self.substitution_matrix.item(2, 1)
        item.setText(_translate("MainWindow", "-7"))
        item = self.substitution_matrix.item(2, 2)
        item.setText(_translate("MainWindow", "2"))
        item = self.substitution_matrix.item(2, 3)
        item.setText(_translate("MainWindow", "-7"))
        item = self.substitution_matrix.item(3, 0)
        item.setText(_translate("MainWindow", "-7"))
        item = self.substitution_matrix.item(3, 1)
        item.setText(_translate("MainWindow", "-5"))
        item = self.substitution_matrix.item(3, 2)
        item.setText(_translate("MainWindow", "-7"))
        item = self.substitution_matrix.item(3, 3)
        item.setText(_translate("MainWindow", "2"))
        self.substitution_matrix.setSortingEnabled(__sortingEnabled)
        self.label_7.setText(_translate("MainWindow", "Substitution matrix"))
        self.label_13.setText(_translate("MainWindow", "Gap penalization"))
        self.label_8.setText(_translate("MainWindow", "Gap:"))
        self.label_9.setText(_translate("MainWindow", "G:"))
        self.label_11.setText(_translate("MainWindow", "L:"))
        self.match_option_cbox.setItemText(0, _translate("MainWindow", "Local match without affine gaps penalty"))
        self.match_option_cbox.setItemText(1, _translate("MainWindow", "Local match with affine gaps penalty"))
        self.label_12.setText(_translate("MainWindow", "Path:"))

        self.open_file_button_1.clicked.connect(self.open_file1)
        self.open_file_button_2.clicked.connect(self.open_file2)
        self.show_global_match_button.clicked.connect(self.make_plot)
        self.search_1.clicked.connect(self.search_by_id1)
        self.search_2.clicked.connect(self.search_by_id2)
        self.combobox_changed()
        self.combobox_2_changed()
        self.comboBox.currentTextChanged.connect(self.combobox_changed)
        self.comboBox_2.currentTextChanged.connect(self.combobox_2_changed)

    def combobox_changed(self):
        self.open_file_button_1.setDisabled(True)
        self.sequence_1_txt.setReadOnly(True)
        self.id_1_txt.setReadOnly(True)
        self.search_1.setDisabled(True)
        if self.comboBox.currentText().__eq__("User input"):
            self.sequence_1_txt.setReadOnly(False)
            self.id_1_txt.setReadOnly(False)
        elif self.comboBox.currentText().__eq__("From file"):
            self.open_file_button_1.setDisabled(False)
        else:
            self.search_1.setDisabled(False)
            self.id_1_txt.setReadOnly(False)

    def combobox_2_changed(self):
        self.open_file_button_2.setDisabled(True)
        self.sequence_2_txt.setReadOnly(True)
        self.id_2_txt.setReadOnly(True)
        self.search_2.setDisabled(True)
        if self.comboBox_2.currentText().__eq__("User input"):
            self.sequence_2_txt.setReadOnly(False)
            self.id_2_txt.setReadOnly(False)
        elif self.comboBox_2.currentText().__eq__("From file"):
            self.open_file_button_2.setDisabled(False)
        else:
            self.search_2.setDisabled(False)
            self.id_2_txt.setReadOnly(False)

    def open_file1(self):
        self.get_file_dir(1)

    def open_file2(self):
        self.get_file_dir(2)

    def make_plot(self):
        print(self.comboBox.currentText())
        if self.comboBox.currentText().__eq__("User input"):
            content = '>' + self.id_1_txt.text() + '\n'
            content = content + self.sequence_1_txt.toPlainText()
            fastaList = FastaParser.parse_fasta(content)
            self.fasta1 = fastaList.__getitem__(0)
        if self.comboBox_2.currentText().__eq__("User input"):
            content = '>' + self.id_2_txt.text() + '\n'
            content = content + self.sequence_2_txt.toPlainText()
            fastaList = FastaParser.parse_fasta(content)
            self.fasta2 = fastaList.__getitem__(0)

        G = int(self.G_txt.text())
        L = int(self.L_txt.text())
        gap = int(self.gap_txt.text())
        localMatch = LocalMatch(gap, G, L, self.sub_matrix_values())
        if self.match_option_cbox.currentText().__eq__("Local match without affine gaps penalty"):
            matrixes = localMatch.match(self.fasta1.get('sequence'), self.fasta2.get('sequence'), True)
        else:
            matrixes = localMatch.match(self.fasta1.get('sequence'), self.fasta2.get('sequence'), False)

        coordinates = localMatch.max_coordinates(matrixes[0])
        print(coordinates)

        self.path_nr_combobox.addItem(str(1))

        matrix = localMatch.compute_path(matrixes[1], matrixes[0], localMatch.sequence1, localMatch.sequence2,
                                         coordinates[1][int(self.path_nr_combobox.currentText())-1],
                                         coordinates[0][int(self.path_nr_combobox.currentText())-1])
        localMatch.show_plot(matrix, self.fasta1.get('id'), self.fasta2.get('id'))

        self.path_nr_combobox.clear()
        for i in range(0, len(coordinates[0])):
            self.path_nr_combobox.addItem(str(i + 1))


        self.statistics_txt.setPlainText(localMatch.get_stats())

    def search_by_id1(self):
        self.search_by_id(1)

    def search_by_id2(self):
        self.search_by_id(2)

    def search_by_id(self, number):
        if number == 1:
            id = self.id_1_txt.text()
            content = FastaReader.fasta_from_url(id)
            fastaList = FastaParser.parse_fasta(content)
            self.fasta1 = fastaList.__getitem__(0)
            self.id_1_txt.setText(self.fasta1.get("id"))
            self.sequence_1_txt.setPlainText(self.fasta1.get("sequence"))

        else:
            id = self.id_2_txt.text()
            content = FastaReader.fasta_from_url(id)
            fastaList = FastaParser.parse_fasta(content)
            self.fasta2 = fastaList.__getitem__(0)
            self.id_2_txt.setText(self.fasta2.get("id"))
            self.sequence_2_txt.setPlainText(self.fasta2.get("sequence"))

    def get_file_dir(self, seq_number):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(None, "", "", "Text Files (*.txt *.fasta)",
                                                  options=options)
        if fileName != '':
            content = FastaReader.fasta_from_file(fileName)
            fastaList = FastaParser.parse_fasta(content)
            fasta = fastaList.__getitem__(0)
            id = fasta.get("id")
            sequence = fasta.get("sequence")
            if seq_number == 1:
                self.fasta1 = fasta
                self.id_1_txt.setText(id)
                self.sequence_1_txt.setPlainText(sequence)
            else:
                self.fasta2 = fasta
                self.id_2_txt.setText(id)
                self.sequence_2_txt.setPlainText(sequence)
        else:
            print("wrong file directory choosen")

    def sub_matrix_values(self):
        model = self.substitution_matrix.model()
        data = []
        i = 0
        data.append([])
        data[0].append('#')
        for j in range(model.columnCount()):
            data[0].append(self.substitution_matrix.verticalHeaderItem(j).text())
        for row in range(model.rowCount()):
            data.append([])
            i += 1
            data[i].append(data[0][i])
            for column in range(model.columnCount()):
                index = model.index(row, column)
                data[row + 1].append(int(model.data(index)))
        return data


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
